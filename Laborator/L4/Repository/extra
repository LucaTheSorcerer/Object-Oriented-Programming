list<shared_ptr<Fruit>> FruitRepository:: getExpiredFruit(const string& current_date) {
    //This function returns all fruits that have an expiry date before the current date
    list<shared_ptr<Fruit>> expired_fruits;
    for(const auto &fruit : fruits) {
        if(fruit->getExpiryDate() < current_date) {
            expired_fruits.push_back(fruit);
        }
    }

    return expired_fruits;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitByOrigin(const string& origin) const {
    //This function returns all the fruits from the same given origin
    list<shared_ptr<Fruit>> fruits_by_origin;
    for(auto const &fruit : fruits) {
        if(fruit->getOrigin() == origin) {
            fruits_by_origin.push_back(fruit);
        }
    }

    return fruits_by_origin;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitByExpiryDate(const string& expiry_date) const {
    //This function returns all the fruits based on the given expiry date
    list<shared_ptr<Fruit>> fruits_by_expiry_date;
    for(auto const &fruit : fruits) {
        if(fruit->getExpiryDate() == expiry_date) {
            fruits_by_expiry_date.push_back(fruit);
        }
    }

    return fruits_by_expiry_date;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitByPrice(double price) const {
    //This function returns all the fruits based on the given price

    //First check if the given price is negative
    if(price < 0) {
        throw std::invalid_argument("The price cannot be negative!");
    }

    list<shared_ptr<Fruit>> fruits_by_price;
    for(auto const &fruit : fruits) {
        if(fruit->getPrice() == price) {
            fruits_by_price.push_back(fruit);
        }
    }

    return fruits_by_price;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitByQuantity(int quantity) const {
    //This function returns all the fruits based on the given quantity

    //First check if the given quantity is negative
    if(quantity < 0) {
        throw std::invalid_argument("The quantity cannot be negative!");
    }

    list<shared_ptr<Fruit>> fruits_by_quantity;
    for(auto const &fruit : fruits) {
        fruits_by_quantity.push_back(fruit);
    }

    return fruits_by_quantity;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitByPriceAndQuantity(double price, int quantity) const {
    //This function returns all the fruits based on the given price and quantity

    //First we check if the given price and quantity are negative

    if(price < 0 && quantity < 0) {
        throw std::invalid_argument("The price and quantity cannot be negative!");
    }

    if(price < 0) {
        throw std::invalid_argument("The price cannot be negative!");
    }

    if(quantity < 0) {
        throw std::invalid_argument("The quantity cannot be negative!");
    }


    list<shared_ptr<Fruit>> fruits_by_price_and_quantity;
    for(auto const &fruit : fruits) {
        if(fruit->getPrice() == price && fruit->getQuantity() == quantity) {
            fruits_by_price_and_quantity.push_back(fruit);
        }
    }


    return fruits_by_price_and_quantity;
}

list<shared_ptr<Fruit>> FruitRepository::getFruitsSortedByExpiryDate() const {
    //This function returns all the fruits sorted by expiry date using the sort function

    list<shared_ptr<Fruit>> sorted_fruits = fruits;
    sorted_fruits.sort([](const shared_ptr<Fruit> &fruit1, const shared_ptr<Fruit> &fruit2) {
        return fruit1->getExpiryDate() < fruit2->getExpiryDate();
    });

    return sorted_fruits;
}



void FruitRepository::removeFruit(const string &name, const string &origin) {
    //This function removes a fruit from the repositoryFruit
    for(auto it = fruits.begin(); it != fruits.end(); it++) {
        if((*it)->getName() == name && (*it)->getOrigin() == origin) {
            fruits.erase(it);
            break;
        }
    }
}